package org.alfresco.consulting.tools.content.creator.agents;


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.alfresco.consulting.tools.content.creator.ImageManager;
import org.alfresco.consulting.words.RandomWords;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;


public class PdfAgent extends FileCreatorAgent implements Runnable {
    private static final Log logger = LogFactory.getLog(PdfAgent.class);

    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
    private Document document;

    protected Log getLogger() {
        return logger;
    }

    protected void createFile() {
        try {
            populateFileInformation();

            document = new Document();
            // Creating the metadata file
            createBulkManifest();

            PdfWriter.getInstance(document, new FileOutputStream(getPathOfFile()));
            document.open();

            addMetaData();
            addTitlePage();
            addTextualContent();
            conditionallyAddImageContent();

            document.close();
        } catch (Exception e) {
            getLogger().error("Unable to create PDF document", e);
        }
    }

    private void conditionallyAddImageContent() throws IOException, DocumentException {
        if (!isCreatingSmallerFiles()) {
            addImages();
        }
    }

    private void addImages() throws IOException, DocumentException {
        for (int i = 0; i < 12; i++)
            addRandomImage();
    }

    private void addRandomImage() throws IOException, DocumentException {
        File randomImage = ImageManager.getImageManager().getRandomImage();
        String randomFilePath = randomImage.getAbsolutePath();
        Image localimage1 = Image.getInstance(randomFilePath);
        document.add(localimage1);
    }

    protected String getFileNameSuffix() {
        return "_PdfSSMR.pdf";
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe Reader under File -> Properties
    private void addMetaData() {
        document.addTitle("SSMR Generated PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText, Alfresco, BulkImport");
        document.addAuthor("Super Size My Repo");
        document.addCreator("Luis Cabaceira");
        document.addCreationDate();
    }

    private void addTitlePage()
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph(getRandomWords(4), catFont));
        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(getRandomWords(500), smallBold));
        addEmptyLine(preface, 8);
        preface.add(new Paragraph("This document was created with the supersizemyrepo tool, beta version.", redFont));
        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private void addTextualContent() throws DocumentException {
        Anchor anchor = new Anchor(getRandomWords(2), catFont);
        anchor.setName(getRandomWords(2));
        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
        Paragraph subPara = new Paragraph(getRandomWords(2), subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(getRandomWords(500)));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(getRandomWords(20)));
        subCatPart.add(new Paragraph(getRandomWords(40)));
        subCatPart.add(new Paragraph(getRandomWords(600)));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);
        // add a table
        createTable(subCatPart);
        // now add all this to the document
        document.add(catPart);
        // Next section
        anchor = new Anchor(getRandomWords(2), catFont);
        anchor.setName(getRandomWords(4));
        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);
        subPara = new Paragraph(getRandomWords(1), subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(getRandomWords(300)));
        // now add all this to the document
        document.add(catPart);

    }

    private String getRandomWords(int numWords) {
        final int actualNumberOfWordsToRetrieve;
        if (numWords <= 10 || isCreatingSmallerFiles())
            actualNumberOfWordsToRetrieve = numWords;
        else
            actualNumberOfWordsToRetrieve = numWords / 10;

        return RandomWords.getWords(actualNumberOfWordsToRetrieve);
    }

    private void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase(getRandomWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(getRandomWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(getRandomWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem(getRandomWords(2)));
        list.add(new ListItem(getRandomWords(2)));
        list.add(new ListItem(getRandomWords(2)));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
